const express = require('express');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;
const apiKey = process.env.OPENWEATHERMAP_API_KEY;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// API endpoint to fetch weather data
app.get('/weather', async (req, res) => {
    const { location } = req.query;

    try {
        const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {
            params: {
                q: location,
                appid: apiKey,
                units: 'metric'
            }
        });

        res.json(response.data);
    } catch (error) {
        console.error('Error fetching weather:', error);
        res.status(500).json({ error: 'Error fetching weather data' });
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
OPENWEATHERMAP_API_KEY=your_api_key_here
npx create-react-app weather-app
cd weather-app
npm install axios
import React, { useState } from 'react';
import axios from 'axios';
import './App.css';

const App = () => {
  const [location, setLocation] = useState('');
  const [weatherData, setWeatherData] = useState(null);
  const [error, setError] = useState(null);

  const fetchWeatherData = async (location) => {
    try {
      const response = await axios.get(`/weather?location=${location}`);
      setWeatherData(response.data);
      setError(null);
    } catch (error) {
      console.error('Error fetching weather:', error);
      setError('Error fetching weather data');
      setWeatherData(null);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (location.trim() !== '') {
      fetchWeatherData(location);
    }
  };

  return (
    <div className="App">
      <h1>Weather Forecast App</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
          placeholder="Enter location..."
          required
        />
        <button type="submit">Get Weather</button>
      </form>
      {error && <p className="error-message">{error}</p>}
      {weatherData && (
        <div className="weather-container">
          <h2>Weather Forecast for {weatherData.city.name}</h2>
          <div className="forecast">
            {weatherData.list.slice(0, 5).map((forecast, index) => (
              <div key={index} className="forecast-item">
                <p>{forecast.dt_txt}</p>
                <p>Temperature: {forecast.main.temp}Â°C</p>
                <p>{forecast.weather[0].description}</p>
                <img
                  src={`http://openweathermap.org/img/w/${forecast.weather[0].icon}.png`}
                  alt="weather icon"
                />
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default App;
.App {
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
  padding: 20px;
}

form {
  margin-bottom: 20px;
}

input[type="text"] {
  padding: 10px;
  width: 200px;
  margin-right: 10px;
}

button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.error-message {
  color: red;
}

.weather-container {
  margin-top: 20px;
}

.forecast {
  display: flex;
  justify-content: space-around;
  margin-top: 20px;
}

.forecast-item {
  text-align: center;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
}

.forecast-item img {
  width: 50px;
  height: 50px;
}
node server.js
npm start
